(async () => {
let canalId = ["120363266665814365@newsletter"];  
let canalNombre = ["ü™º CORTANA 2.0 BOT ü™º"]
  function setupConnection(conn) {
  conn.sendMessage2 = async (chat, content, m, options = {}) => {
    const firstChannel = { 
      id: canalId[0], 
      nombre: canalNombre[0] 
    };
    if (content.sticker) {
      return conn.sendMessage(chat, { 
        sticker: content.sticker 
      }, { 
        quoted: m,
        ...options 
      });
    }
    const messageOptions = {
      ...content,
      mentions: content.mentions || options.mentions || [],
      contextInfo: {
        ...(content.contextInfo || {}),
        forwardedNewsletterMessageInfo: {
          newsletterJid: firstChannel.id,
          serverMessageId: '',
          newsletterName: firstChannel.nombre
        },
        forwardingScore: 9999999,
        isForwarded: true,
        mentionedJid: content.mentions || options.mentions || []
      }
    };

    return conn.sendMessage(chat, messageOptions, {
      quoted: m,
      ephemeralExpiration: 86400000,
      disappearingMessagesInChat: 86400000,
      ...options
    });
  };
}
//nsfw 
async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    return await res.text();
  } catch {
    return 'Eres un asistente inteligente';
  }
}

  
function cleanResponse(text) {
  if (!text) return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim();
}

async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  });
  return data.result;
}

async function perplexityQuery(q, prompt) {
  const { data } = await axios.get('https://api.perplexity.ai/chat', {
    params: {
      query: encodeURIComponent(q),
      context: encodeURIComponent(prompt)
    }
  });
  return data.response;
}
  //lumi
  const axios = require("axios");
const fetch = require("node-fetch");

   
    const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, makeCacheableSignalKeyStore } = require("@whiskeysockets/baileys");
    const chalk = require("chalk");
    const yargs = require('yargs/yargs')
    const { tmpdir } = require('os')
    const { join } = require('path')
    const figlet = require("figlet");
    const fs = require("fs");
    const { readdirSync, statSync, unlinkSync } = require('fs')
    const readline = require("readline");
    const pino = require("pino");
    const { isOwner, getPrefix, allowedPrefixes } = require("./config");
    const { handleCommand } = require("./main"); 
    // Carga de credenciales y estado de autenticaci√≥n
    const { state, saveCreds } = await useMultiFileAuthState("./sessions");
  const { downloadContentFromMessage } = require('@whiskeysockets/baileys');
  //lista
function isAllowedUser(sender) {
  const listaFile = "./lista.json";
  if (!fs.existsSync(listaFile)) return false;
  const lista = JSON.parse(fs.readFileSync(listaFile, "utf-8"));
  // Extrae solo los d√≠gitos del n√∫mero para comparar
  const num = sender.replace(/\D/g, "");
  return lista.includes(num);
}
    
    //privado y admins

const path = "./activos.json";

// üìÇ Cargar configuraci√≥n de modos desde el archivo JSON
function cargarModos() {
    if (!fs.existsSync(path)) {
        fs.writeFileSync(path, JSON.stringify({ modoPrivado: false, modoAdmins: {} }, null, 2));
    }
    return JSON.parse(fs.readFileSync(path, "utf-8"));
}

// üìÇ Guardar configuraci√≥n de modos en el archivo JSON
function guardarModos(data) {
    fs.writeFileSync(path, JSON.stringify(data, null, 2));
}

let modos = cargarModos();
    
    // Configuraci√≥n de consola
    console.log(chalk.cyan(figlet.textSync("Cortana 2.0 Bot", { font: "Standard" })));    
    console.log(chalk.green("\n‚úÖ Iniciando conexi√≥n...\n"));
    
    // ‚úÖ Mostrar opciones de conexi√≥n bien presentadas
    console.log(chalk.yellow("üì° ¬øC√≥mo deseas conectarte?\n"));
    console.log(chalk.green("  [1] ") + chalk.white("üì∑ Escanear c√≥digo QR"));
    console.log(chalk.green("  [2] ") + chalk.white("üîë Ingresar c√≥digo de 8 d√≠gitos\n"));

    // Manejo de entrada de usuario
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    const question = (text) => new Promise((resolve) => rl.question(text, resolve));

    let method = "1"; // Por defecto: C√≥digo QR
    if (!fs.existsSync("./sessions/creds.json")) {
        method = await question(chalk.magenta("üìû Ingresa tu n√∫mero (Ej: 5491168XXXX) "));

        if (!["1", "2"].includes(method)) {
            console.log(chalk.red("\n‚ùå Opci√≥n inv√°lida. Reinicia el bot y elige 1 o 2."));
            process.exit(1);
        }
    }

    async function startBot() {
        try {
            let { version } = await fetchLatestBaileysVersion();
            const socketSettings = {
                printQRInTerminal: method === "1",
                logger: pino({ level: "silent" }),
                auth: { creds: state.creds, keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "silent" })) },
                browser: method === "1" ? ["AzuraBot", "Safari", "1.0.0"] : ["Ubuntu", "Chrome", "20.0.04"],
            };

            const sock = makeWASocket(socketSettings);
setupConnection(sock)
            // Si la sesi√≥n no existe y se usa el c√≥digo de 8 d√≠gitos
            if (!fs.existsSync("./sessions/creds.json") && method === "2") {
                let phoneNumber = await question("üòéFino vamos ayaüòé: ");
                phoneNumber = phoneNumber.replace(/\D/g, "");
                setTimeout(async () => {
                    let code = await sock.requestPairingCode(phoneNumber);
                    console.log(chalk.magenta("üîë C√≥digo de vinculaci√≥n: ") + chalk.yellow(code.match(/.{1,4}/g).join("-")));
                }, 2000);
            }

//_________________

global.opts = new Object(yargs(process.argv.slice(2)).exitProcess(false).parse())

//tmp
if (!opts['test']) {
  setInterval(async () => {
  //  if (global.db.data) await global.db.write().catch(console.error)
    if (opts['autocleartmp']) try {
      clearTmp()

    } catch (e) { console.error(e) }
  }, 60 * 1000)
}

if (opts['server']) (await import('./server.js')).default(global.conn, PORT)

/* Clear */
async function clearTmp() {
  const tmp = [tmpdir(), join(__dirname, './tmp')]
  const filename = []
  tmp.forEach(dirname => readdirSync(dirname).forEach(file => filename.push(join(dirname, file))))

  //---
  return filename.map(file => {
    const stats = statSync(file)
    if (stats.isFile() && (Date.now() - stats.mtimeMs >= 1000 * 60 * 1)) return unlinkSync(file) // 1 minuto
    return false
  })
}

setInterval(async () => {
  await clearTmp()
  console.log(chalk.cyanBright(`‚ï≠‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™üîÜ‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ïÆ\n‚îÇSE LIMPIO LA CARPETA TMP CORRECTAMENTE\n‚ï∞‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚â™üîÜ‚â´‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚ïØ`))
}, 1000 * 60 * 60); // ‚Üê 1 hora en milisegundos

//sessions/jadibts
            // Funci√≥n para verificar si un usuario es administrador en un grupo
            async function isAdmin(sock, chatId, sender) {
                try {
                    const groupMetadata = await sock.groupMetadata(chatId);
                    const admins = groupMetadata.participants
                        .filter(p => p.admin)
                        .map(p => p.id);
                    return admins.includes(sender) || isOwner(sender);
                } catch (error) {
                    console.error("Error verificando administrador:", error);
                    return false;
                }
            }

// Ruta de los archivos a limpiar
const archivosAntidelete = ['./antidelete.json', './antideletepri.json'];

function limpiarAntidelete() {
  for (const archivo of archivosAntidelete) {
    if (fs.existsSync(archivo)) {
      fs.writeFileSync(archivo, JSON.stringify({}, null, 2));
      console.log(`üßπ Archivo limpiado: ${archivo}`);
    }
  }
}

// Ejecutar limpieza cada 30 minutos
setInterval(limpiarAntidelete, 30 * 60 * 1000); // 30 min

// Ejecutar una vez al inicio
limpiarAntidelete();
//cada 30 minutos antidelete          
          
// Funci√≥n para revisar y actualizar grupos cada 5 segundos
setInterval(async () => {
  try {
    const ahora = Date.now();

    // === REVISAR CIERRE AUTOM√ÅTICO ===
    const tiempoCerrarPath = path.resolve("./tiempo1.json");
    if (fs.existsSync(tiempoCerrarPath)) {
      const tiempoCerrar = JSON.parse(fs.readFileSync(tiempoCerrarPath, "utf-8"));

      for (const groupId of Object.keys(tiempoCerrar)) {
        const tiempoLimite = tiempoCerrar[groupId];
        if (ahora >= tiempoLimite) {
          console.log(`‚è∞ Se cumpli√≥ el tiempo para CERRAR el grupo: ${groupId}`);

          try {
            await sock.groupSettingUpdate(groupId, "announcement"); // Cerrar grupo
            await sock.sendMessage(groupId, {
              text: "üîí El grupo ha sido cerrado autom√°ticamente. Solo admins pueden escribir."
            });
          } catch (error) {
            console.error(`‚ùå Error cerrando grupo ${groupId}:`, error);
          }

          delete tiempoCerrar[groupId];
          fs.writeFileSync(tiempoCerrarPath, JSON.stringify(tiempoCerrar, null, 2));
        }
      }
    }
//limpieza
    
    // === REVISAR APERTURA AUTOM√ÅTICA ===
    const tiempoAbrirPath = path.resolve("./tiempo2.json");
    if (fs.existsSync(tiempoAbrirPath)) {
      const tiempoAbrir = JSON.parse(fs.readFileSync(tiempoAbrirPath, "utf-8"));

      for (const groupId of Object.keys(tiempoAbrir)) {
        const tiempoLimite = tiempoAbrir[groupId];
        if (ahora >= tiempoLimite) {
          console.log(`‚è∞ Se cumpli√≥ el tiempo para ABRIR el grupo: ${groupId}`);

          try {
            await sock.groupSettingUpdate(groupId, "not_announcement"); // Abrir grupo
            await sock.sendMessage(groupId, {
              text: "üîì El grupo ha sido abierto autom√°ticamente. ¬°Todos pueden escribir!"
            });
          } catch (error) {
            console.error(`‚ùå Error abriendo grupo ${groupId}:`, error);
          }

          delete tiempoAbrir[groupId];
          fs.writeFileSync(tiempoAbrirPath, JSON.stringify(tiempoAbrir, null, 2));
        }
      }
    }

  } catch (error) {
    console.error("‚ùå Error en la revisi√≥n autom√°tica de grupos:", error);
  }
}, 5000); // Revisa cada 5 segundos
//ok de abria onkkkkkk
          
// Listener para detectar cambios en los participantes de un grupo (bienvenida y despedida)
sock.ev.on("group-participants.update", async (update) => {
  try {
    // Solo operar en grupos
    if (!update.id.endsWith("@g.us")) return;

    const fs = require("fs");
    const activosPath = "./activos.json";
    let activos = {};
    if (fs.existsSync(activosPath)) {
      activos = JSON.parse(fs.readFileSync(activosPath, "utf-8"));
    }

    // ***************** L√ìGICA ANTIARABE *****************
    // Si la funci√≥n antiarabe est√° activada en este grupo...
    if (activos.antiarabe && activos.antiarabe[update.id]) {
      // Lista de prefijos prohibidos (sin el signo +)
      const disallowedPrefixes = ["20", "212", "213", "216", "218", "222", "249", "252", "253", "269", "962", "963", "964", "965", "966", "967", "968", "970", "971", "973", "974"];
      if (update.action === "add") {
        // Obtener metadata del grupo para verificar administradores
        let groupMetadata = {};
        try {
          groupMetadata = await sock.groupMetadata(update.id);
        } catch (err) {
          console.error("Error obteniendo metadata del grupo:", err);
        }
        for (const participant of update.participants) {
          // Extraer el n√∫mero (la parte antes de "@")
          const phoneNumber = participant.split("@")[0];
          // Comprobar si el n√∫mero comienza con alguno de los prefijos prohibidos
          const isDisallowed = disallowedPrefixes.some(prefix => phoneNumber.startsWith(prefix));
          if (isDisallowed) {
            // Verificar si el usuario es admin o propietario
            let bypass = false;
            const participantInfo = groupMetadata.participants.find(p => p.id === participant);
            if (participantInfo && (participantInfo.admin === "admin" || participantInfo.admin === "superadmin")) {
              bypass = true;
            }
            if (!bypass && !isOwner(participant)) {
              // Enviar aviso mencionando al usuario
              await sock.sendMessage(update.id, {
                text: `‚ö†Ô∏è @${phoneNumber} tiene un n√∫mero prohibido y ser√° expulsado.`,
                mentions: [participant]
              });
              // Intentar expulsar al usuario
              try {
                await sock.groupParticipantsUpdate(update.id, [participant], "remove");
              } catch (expulsionError) {
                console.error("Error al expulsar al usuario:", expulsionError);
              }
            }
          }
        }
      }
    }
    // **************** FIN L√ìGICA ANTIARABE ****************

    // **************** L√ìGICA BIENVENIDA/DESPEDIDA ****************
const welcomeActivo = activos.welcome?.[update.id];
const despedidasActivo = activos.despedidas?.[update.id];

if (!welcomeActivo && !despedidasActivo) return;

const welcomePath = "./welcome.json";
let customWelcomes = {};
if (fs.existsSync(welcomePath)) {
  customWelcomes = JSON.parse(fs.readFileSync(welcomePath, "utf-8"));
}
    // Textos integrados para bienvenida y despedida
    const welcomeTexts = [
      "¬°Bienvenido(a)! ü™º CORTANA 2.0 BOT ü™º te recibe con los brazos abiertos ü§ó‚ú®. ¬°Disfruta y comparte!",
      "¬°Hola! ü™º CORTANA 2.0 BOT ü™º te abraza con alegr√≠a üéâü§ñ. ¬°Prep√°rate para grandes aventuras!",
      "¬°Saludos! ü™º CORTANA 2.0 BOT ü™º Bot te da la bienvenida para que descubras ideas brillantes üöÄüåü.",
      "¬°Bienvenido(a) al grupo! ü™º CORTANA 2.0 BOT ü™ºte invita a explorar un mundo de posibilidades ü§©üí°.",
      "¬°Qu√© alegr√≠a verte! ü™º CORTANA 2.0 BOT ü™º te recibe y te hace sentir en casa üè†üíñ.",
      "¬°Hola! Gracias por unirte; Azura Ultra 2.0 Bot te saluda con entusiasmo üéäüòä.",
      "¬°Bienvenido(a)! Cada nuevo miembro es una chispa de inspiraci√≥n en ü™º CORTANA 2.0 BOT ü™º üî•‚ú®.",
      "¬°Saludos cordiales! ü™º CORTANA 2.0 BOT ü™º te env√≠a un abrazo virtual ü§óüíô.",
      "¬°Bienvenido(a)! √önete a la experiencia ü™º CORTANA 2.0 BOT ü™ºy comparte grandes ideas üéâüåà.",
      "¬°Hola! ü™º CORTANA 2.0 BOT ü™ºte da la bienvenida para vivir experiencias inolvidables üöÄ‚ú®!"
    ];
    const farewellTexts = [
      "¬°Adi√≥s! ü™º CORTANA 2.0 BOT ü™º Bot te despide con gratitud y te desea √©xitos en tus nuevos caminos üëãüí´.",
      "Hasta pronto, desde ü™º CORTANA 2.0 BOT ü™º te deseamos lo mejor y esperamos verte de nuevo üåüüôè.",
      "¬°Chao! ü™º CORTANA 2.0 BOT ü™º se despide, pero siempre tendr√°s un lugar si decides regresar ü§óüíî.",
      "Nos despedimos con cari√±o; gracias por compartir momentos en ü™º CORTANA 2.0 BOT ü™º üè†‚ù§Ô∏è.",
      "¬°Adi√≥s, amigo(a)! ü™º CORTANA 2.0 BOT ü™ºte manda un abrazo y te desea mucha suerte ü§ùüåü.",
      "Hasta luego, y gracias por haber sido parte de nuestra comunidad üöÄüíô.",
      "Chao, que tus futuros proyectos sean tan brillantes como t√∫ üåü‚ú®. ü™º CORTANA 2.0 BOT ü™º te recuerda siempre.",
      "¬°Nos vemos! ü™º CORTANA 2.0 BOT ü™º te dice adi√≥s con un coraz√≥n lleno de gratitud ü§ó‚ù§Ô∏è.",
      "¬°Adi√≥s! Que tu camino est√© lleno de √©xitos, te lo desea ü™º CORTANA 2.0 BOT ü™º üöÄüåü.",
      "Hasta pronto, y gracias por haber compartido momentos inolvidables con ü™º CORTANA 2.0 BOT ü™º üëãüíñ."
    ];

// Procesar seg√∫n la acci√≥n: "add" (entrada) o "remove" (salida)

// Si alguien entra y la bienvenida est√° activa
if (update.action === "add" && welcomeActivo) {
  for (const participant of update.participants) {
    const mention = `@${participant.split("@")[0]}`;
    const customMessage = customWelcomes[update.id];

    // Obtener foto de perfil (o grupo si falla)
    let profilePicUrl;
    try {
      profilePicUrl = await sock.profilePictureUrl(participant, "image");
    } catch (err) {
      try {
        profilePicUrl = await sock.profilePictureUrl(update.id, "image");
      } catch {
        profilePicUrl = "https://cdn.russellxz.click/2486b9cc.jpeg";
      }
    }

    if (customMessage) {
      // Enviar mensaje personalizado
      await sock.sendMessage(update.id, {
        image: { url: profilePicUrl },
        caption: `üëã ${mention}\n\n${customMessage}`,
        mentions: [participant]
      });
    } else {
      // Elegir mensaje aleatorio
      const mensajeTexto = welcomeTexts[Math.floor(Math.random() * welcomeTexts.length)];
      const option = Math.random();

      if (option < 0.33) {
        await sock.sendMessage(update.id, {
          image: { url: profilePicUrl },
          caption: `üëã ${mention}\n\n${mensajeTexto}`,
          mentions: [participant]
        });
      } else if (option < 0.66) {
        let groupDesc = "";
        try {
          const metadata = await sock.groupMetadata(update.id);
          groupDesc = metadata.desc ? `\n\nüìú *Descripci√≥n del grupo:*\n${metadata.desc}` : "";
        } catch (err) {
          groupDesc = "";
        }

        await sock.sendMessage(update.id, {
          text: `üëã ${mention}\n\n${mensajeTexto}${groupDesc}`,
          mentions: [participant]
        });
      } else {
        await sock.sendMessage(update.id, {
          text: `üëã ${mention}\n\n${mensajeTexto}`,
          mentions: [participant]
        });
      }
    }
  }
} else if (update.action === "remove" && despedidasActivo) {
  // Si alguien se va y despedidas est√° activado
  for (const participant of update.participants) {
    const mention = `@${participant.split("@")[0]}`;
    const mensajeTexto = farewellTexts[Math.floor(Math.random() * farewellTexts.length)];
    const option = Math.random();

    let profilePicUrl;
    try {
      profilePicUrl = await sock.profilePictureUrl(participant, "image");
    } catch (err) {
      profilePicUrl = "https://cdn.russellxz.click/2486b9cc.jpeg";
    }

    if (option < 0.5) {
      await sock.sendMessage(update.id, {
        image: { url: profilePicUrl },
        caption: `üëã ${mention}\n\n${mensajeTexto}`,
        mentions: [participant]
      });
    } else {
      await sock.sendMessage(update.id, {
        text: `üëã ${mention}\n\n${mensajeTexto}`,
        mentions: [participant]
      });
    }
  }
}
// **************** FIN L√ìGICA BIENVENIDA/DESPEDIDA ****************
    // **************** FIN L√ìGICA BIENVENIDA/DESPEDIDA ****************

  } catch (error) {
    console.error("Error en el evento group-participants.update:", error);
  }
});
           
            // üü¢ Consola de mensajes entrantes con dise√±o

sock.ev.on("messages.upsert", async (messageUpsert) => {
  try {
    const msg = messageUpsert.messages[0];
    if (!msg) return;
    
    const chatId = msg.key.remoteJid;
    const isGroup = chatId.endsWith("@g.us");
    const sender = msg.key.participant
      ? msg.key.participant.replace(/[^0-9]/g, "")
      : msg.key.remoteJid.replace(/[^0-9]/g, "");
    const botNumber = sock.user.id.split(":")[0];
    const fromMe = msg.key.fromMe || sender === botNumber;
    let messageText = msg.message?.conversation || msg.message?.extendedTextMessage?.text || "";
    let messageType = Object.keys(msg.message || {})[0];

    const activos = fs.existsSync("./activos.json") ? JSON.parse(fs.readFileSync("./activos.json")) : {};
    const lista = fs.existsSync("./lista.json") ? JSON.parse(fs.readFileSync("./lista.json")) : [];
    const isAllowedUser = (num) => lista.includes(num);

    console.log(chalk.yellow(`\nüì© Nuevo mensaje recibido`));
    console.log(chalk.green(`üì® De: ${fromMe ? "[T√∫]" : "[Usuario]"} ${chalk.bold(sender)}`));
    console.log(chalk.cyan(`üí¨ Tipo: ${messageType}`));
    console.log(chalk.cyan(`üí¨ Mensaje: ${chalk.bold(messageText || "üìÇ (Mensaje multimedia)")}`));
    console.log(chalk.gray("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"));


    // ‚úÖ Procesar comando
    if (messageText.startsWith(global.prefix)) {
      const command = messageText.slice(global.prefix.length).trim().split(" ")[0];
      const args = messageText.slice(global.prefix.length + command.length).trim().split(" ");
      handleCommand(sock, msg, command, args, sender);
    }

  } catch (error) {
    console.error("‚ùå Error en messages.upsert:", error);
  }
});
            
            
            
const { Boom } = require("@hapi/boom");
let reconnectionAttempts = {}; // conteo por sesi√≥n

sock.ev.on("connection.update", async (update) => {
  const { connection, lastDisconnect } = update;

  const sessionPath = sock.sessionPath || "./sessions";
  const isSubbot = sessionPath.includes("/subbots/") || sessionPath.includes("\\subbots\\");
  const idSesion = sessionPath.split(/[\\/]/).pop(); // nombre de carpeta

  if (connection === "connecting") {
    console.log(chalk.blue(`üîÑ Conectando a WhatsApp... (${isSubbot ? "subbot" : "bot principal"})`));
  }

  else if (connection === "open") {
    console.log(chalk.green(`‚úÖ ¬°Conexi√≥n establecida con √©xito! (${isSubbot ? "subbot" : "bot principal"})`));

    // Resetear intentos
    reconnectionAttempts[idSesion] = 0;

    // Solo para bot principal
    if (!isSubbot) {
      const restarterFile = "./lastRestarter.json";
      if (fs.existsSync(restarterFile)) {
        try {
          const data = JSON.parse(fs.readFileSync(restarterFile, "utf-8"));
          if (data.chatId) {
            await sock.sendMessage(data.chatId, {
              text: "‚úÖ *El bot est√° en l√≠nea nuevamente tras el reinicio.* üöÄ"
            });
            console.log(chalk.green("üì¢ Notificaci√≥n enviada al chat del reinicio."));
            fs.unlinkSync(restarterFile);
          }
        } catch (error) {
          console.error("‚ùå Error al procesar lastRestarter.json:", error);
        }
      }
    }
  }

  else if (connection === "close") {
    const reasonCode = new Boom(lastDisconnect?.error)?.output?.statusCode || 0;
    const reasonText = require("@whiskeysockets/baileys").DisconnectReason[reasonCode] || "Motivo desconocido";
    const maxIntentos = 3;

    console.log(chalk.red(`‚ùå Conexi√≥n cerrada (${isSubbot ? "subbot" : "principal"}: ${idSesion})`));
    console.log(chalk.red(`üîÅ Intentando reconectar... Motivo: ${reasonText}`));

    reconnectionAttempts[idSesion] = (reconnectionAttempts[idSesion] || 0) + 1;

    if (isSubbot) {
      if (reconnectionAttempts[idSesion] <= maxIntentos) {
        console.log(chalk.yellow(`üîÑ Reintentando subbot (${idSesion}) [Intento ${reconnectionAttempts[idSesion]}/${maxIntentos}]`));
        setTimeout(() => {
          iniciarSubbotDesdePath(sessionPath); // ‚Üê esta funci√≥n debe existir
        }, 3000);
      } else {
        console.log(chalk.red(`üí• Subbot (${idSesion}) fall√≥ ${maxIntentos} veces. Eliminando sesi√≥n.`));
        try {
          fs.rmSync(sessionPath, { recursive: true, force: true });
          console.log(chalk.gray(`üßπ Sesi√≥n eliminada: ${sessionPath}`));
        } catch (err) {
          console.error("‚ùå Error al eliminar sesi√≥n:", err);
        }
      }
    } else {
      console.log(chalk.blue("üîÑ Reiniciando el bot principal en 5 segundos..."));
      setTimeout(startBot, 5000);
    }
  }
});



const path = require("path");
            
 
    
            
            sock.ev.on("creds.update", saveCreds);

            // Manejo de errores global para evitar que el bot se detenga
            process.on("uncaughtException", (err) => {
                console.error(chalk.red("‚ö†Ô∏è Error no manejado:"), err);
            });

            process.on("unhandledRejection", (reason, promise) => {
                console.error(chalk.red("üö® Promesa rechazada sin manejar:"), promise, "raz√≥n:", reason);
            });

        } catch (error) {
            console.error(chalk.red("‚ùå Error en la conexi√≥n:"), error);
            console.log(chalk.blue("üîÑ Reiniciando en 5 segundos..."));
            setTimeout(startBot, 5000); // Intentar reconectar despu√©s de 5 segundos en caso de error
        }
    }

    startBot();
  
})();
